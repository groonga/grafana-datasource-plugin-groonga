name: CI
on:
  - push
  - pull_request
jobs:
  ci:
    name: Node.js ${{ matrix.node-version }} on ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-18.04
          - ubuntu-20.04
          - macos-latest
          - windows-latest
        node-version:
          - 12
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ matrix.runs-on }}-${{ hashFiles('yarn.lock') }}
      - name: Install
        run: |
          yarnpkg install --frozen-lockfile
      - name: Build
        run: |
          ./node_modules/.bin/grafana-toolkit plugin:ci-build
      - name: Keep build results
        run: |
          ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - name: Package
        if: |
          startsWith(matrix.runs-on, 'ubuntu-')
        run: |
          GRABPL_VERSION=0.5.0
          wget https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v${GRABPL_VERSION}/grabpl
          chmod +x grabpl
          sudo mv grabpl /usr/local/bin/
          ./node_modules/.bin/grafana-toolkit plugin:ci-package
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runs-on }}-nodejs-${{ matrix.node-version }}
          path: ci
      - name: Package for release
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.runs-on == 'ubuntu-20.04'
        id: package-for-release
        run: |
          ./node_modules/.bin/grafana-toolkit plugin:build
          name=$(jq -r '.name' package.json)
          version=$(jq -r '.version' package.json)
          mv dist ${name}
          archive=${name}-${version}.zip
          archive_sha1=${archive}.sha1
          zip -r ${archive} ${name}
          sha1sum ${archive} > ${archive_sha1}
          echo ::set-output name=zip-asset-path::${archive}
          echo ::set-output name=zip-asset-name::${archive}
          echo ::set-output name=zip-sha1-asset-path::${archive_sha1}
          echo ::set-output name=zip-sha1-asset-name::${archive_sha1}
        uses: actions/checkout@v2
      - name: Create release
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.runs-on == 'ubuntu-20.04'
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
      - uses: actions/upload-artifact@v2
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.runs-on == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package-for-release.outputs.zip-asset-path }}
          asset_name: ${{ steps.package-for-release.outputs.zip-asset-name }}
          asset_content_type: application/zip
      - uses: actions/upload-artifact@v2
        if: |
          startsWith(github.ref, 'refs/tags/') && matrix.runs-on == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package-for-release.outputs.sha1-asset-path }}
          asset_name: ${{ steps.package-for-release.outputs.sha1-asset-name }}
          asset_content_type: text/plain
